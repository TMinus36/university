# Java Final Project: Student Record Manager

## Overview

This project is the final assignment for the Java module in your Computer Science coursework. The goal is to implement a fully functional student record management system using core Java concepts. You will gain hands-on experience with:

* Object-Oriented Programming
* Collections (`ArrayList`)
* File I/O with Serialization
* Exception Handling
* Menu-driven Console Applications

---

## Project Requirements

### Functional Requirements

* Add new student records
* Display all students
* Search for a student by ID
* Save student records to a file
* Load student records from a file
* Exit the application gracefully

### Technical Requirements

* Use of at least one class with multiple fields and methods
* Use of `ArrayList` to store records
* File operations using `ObjectOutputStream` and `ObjectInputStream`
* Handle exceptions and invalid inputs gracefully

---

## Directory Structure

```
StudentRecordManager/
â”œâ”€â”€ src/
â”‚   â””â”€â”€ edu/hsn/studentmanager/
â”‚       â”œâ”€â”€ Student.java
â”‚       â”œâ”€â”€ StudentManager.java
â”‚       â””â”€â”€ Main.java
â”œâ”€â”€ JAVA.md
â””â”€â”€ students.dat (created at runtime when saving records)
```

---

## Line-by-Line Code Walkthrough

### Student.java

```java
package edu.hsn.studentmanager; // Defines the package structure

import java.io.Serializable; // Needed for object serialization

public class Student implements Serializable { // The Student class implements Serializable for file storage
    private String id;      // Unique student ID
    private String name;    // Student's full name
    private String major;   // Major field of study
    private double gpa;     // GPA score

    public Student(String id, String name, String major, double gpa) {
        this.id = id; this.name = name; this.major = major; this.gpa = gpa;
    }

    // Getters
    public String getId() { return id; }
    public String getName() { return name; }
    public String getMajor() { return major; }
    public double getGpa() { return gpa; }

    // Setters
    public void setId(String id) { this.id = id; }
    public void setName(String name) { this.name = name; }
    public void setMajor(String major) { this.major = major; }
    public void setGpa(double gpa) { this.gpa = gpa; }

    // Print-friendly representation of the student object
    @Override
    public String toString() {
        return String.format("ID: %s | Name: %s | Major: %s | GPA: %.2f", id, name, major, gpa);
    }
}
```

---

### StudentManager.java

```java
package edu.hsn.studentmanager;

import java.util.*;           // For ArrayList and Scanner
import java.io.*;             // For File I/O

public class StudentManager {
    private ArrayList<Student> students = new ArrayList<>(); // Stores all student records

    public void addStudent(Student s) {
        students.add(s); // Add new student
    }

    public void displayAllStudents() {
        if (students.isEmpty()) {
            System.out.println("No students in the record.");
            return;
        }
        for (Student s : students) {
            System.out.println(s); // Calls toString()
        }
    }

    public Student searchById(String id) {
        for (Student s : students) {
            if (s.getId().equalsIgnoreCase(id)) return s; // Case-insensitive search
        }
        return null; // Not found
    }

    public void saveToFile(String filename) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(students); // Serialize list
            System.out.println("Records saved successfully.");
        } catch (IOException e) {
            System.err.println("Error saving file: " + e.getMessage());
        }
    }

    public void loadFromFile(String filename) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            students = (ArrayList<Student>) ois.readObject(); // Deserialize list
            System.out.println("Records loaded successfully.");
        } catch (IOException | ClassNotFoundException e) {
            System.err.println("Error loading file: " + e.getMessage());
        }
    }
}
```

---

### Main.java

```java
package edu.hsn.studentmanager;

import java.util.Scanner; // For user input

public class Main {
    public static void main(String[] args) {
        StudentManager manager = new StudentManager();
        Scanner sc = new Scanner(System.in);
        String choice;

        do {
            System.out.println("\n== Student Record Manager ==");
            System.out.println("1. Add Student");
            System.out.println("2. Display All Students");
            System.out.println("3. Search Student by ID");
            System.out.println("4. Save to File");
            System.out.println("5. Load from File");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextLine();

            switch (choice) {
                case "1":
                    System.out.print("Enter ID: ");
                    String id = sc.nextLine();
                    System.out.print("Enter Name: ");
                    String name = sc.nextLine();
                    System.out.print("Enter Major: ");
                    String major = sc.nextLine();
                    System.out.print("Enter GPA: ");
                    double gpa = Double.parseDouble(sc.nextLine());
                    manager.addStudent(new Student(id, name, major, gpa));
                    break;
                case "2":
                    manager.displayAllStudents();
                    break;
                case "3":
                    System.out.print("Enter ID to search: ");
                    Student result = manager.searchById(sc.nextLine());
                    if (result != null) System.out.println(result);
                    else System.out.println("Student not found.");
                    break;
                case "4":
                    manager.saveToFile("students.dat");
                    break;
                case "5":
                    manager.loadFromFile("students.dat");
                    break;
                case "6":
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice.");
            }
        } while (!choice.equals("6"));

        sc.close();
    }
}
```

---

## ðŸ§  Summary

Youâ€™ve just completed a full Java application with real-world relevance, touching on file persistence, data handling, and object management. In a professional environment, this app could be scaled with a GUI, database backend, and role-based permissions.


